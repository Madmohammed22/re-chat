import path from 'path';
import fastif// Emoji to ChatReactionType mapping
const emojiToReactionType: Record<string, ChatReactionType> = {
  '👍': 'like',
  '🧡': 'love',
  '😂': 'laugh',
  '🙂': 'wow',
  '😢': 'sad',
  '🙏': 'thanks',
};ifyRequest, FastifyReply } from 'fastify';
import fastifyStatic from '@fastify/static';
import WebSocket, { WebSocketServer } from 'ws';
import * as db from './db.js';

import type {
  ChatMessage,
  ChatReaction,
  ChatReactionType,
  ChatMessageType,
  ChatMessageStatus,
  User,
} from './types.js';

const app = fastify();
const server = app.server;
const wss = new WebSocketServer({ server });

console.log('WebSocket server created');

wss.on('error', (error) => {
  console.error('WebSocket server error:', error);
});

wss.on('close', () => {
  console.log('WebSocket server closed');
});

await app.register(fastifyStatic, {
  root: path.join(process.cwd(), 'dist'),
  prefix: '/',
});

app.get('/', async (req, reply) => {
  return reply.sendFile('index.html');
});

// Emoji to ChatReactionType mapping
const emojiToReactionType: Record<string, ChatReactionType> = {
  '👍': 'like',
  '❤️': 'love',
  '😂': 'laugh',
  '�': 'wow',
  '�😢': 'sad',
  '�': 'thanks',
};

function mapEmojiToReactionType(emoji: string): ChatReactionType {
  return emojiToReactionType[emoji] || 'like';
}

function createUser(username: string): User {
  return { username };
}

function formatDbMessageToChatMessage(
  row: db.DbMessageRow,
  reactionsRows: db.DbReactionRow[]
): ChatMessage {
  const reactions: ChatReaction[] = reactionsRows.map(r => ({
    from: createUser(r.user),
    type: mapEmojiToReactionType(r.emoji),
  }));

  return {
    id: row.id,
    from: createUser(row.sender),
    date: new Date(row.timestamp),
    message: row.message,
    status: 'sent',
    type: 'text',
    reactions,
  };
}

wss.on('connection', async ws => {
  console.log('Client connected');
  console.log('Total connected clients:', wss.clients.size);

  try {
    const messages = await db.getMessages();

    // Format messages with their reactions
    const messagesWithReactions: ChatMessage[] = messages.map(msg => {
      let reactions: db.DbReactionRow[] = [];
      if (msg.reaction_data) {
        try {
          // Parse the grouped reaction data
          reactions = JSON.parse(`[${msg.reaction_data}]`)
            .filter((r: any) => r && r.emoji && r.user)
            .map((r: any) => ({
              emoji: r.emoji,
              user: r.user,
              message_id: msg.id,
              id: 0,
              timestamp: new Date().toISOString()
            }));
        } catch (e) {
          console.error('Error parsing reactions:', e);
        }
      }
      return formatDbMessageToChatMessage(msg, reactions);
    });

    ws.send(JSON.stringify({ 
      type: 'history', 
      messages: messagesWithReactions 
    }));
  } catch (err) {
    console.error('Error loading chat history:', err);
    ws.send(JSON.stringify({ type: 'history', messages: [] }));
  }

  ws.on('message', async data => {
    console.log('Received message:', data.toString());
    try {
      const parsed = JSON.parse(data.toString());
      console.log('Parsed message:', parsed);

      if (parsed.type === 'chat') {
        const sender: string = parsed.sender;
        const messageText: string = parsed.message;

        const insertedId = await db.addMessage({
          sender,
          message: messageText,
        });

        const chatMessage: ChatMessage = {
          id: insertedId,
          from: createUser(sender),
          date: new Date(),
          message: messageText,
          status: 'sent',
          type: 'text',
          reactions: [],
        };

        // Broadcast to all clients
        wss.clients.forEach(client => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(
              JSON.stringify({
                type: 'chat',
                id: insertedId,
                message: chatMessage,
              })
            );
          }
        });
      } else if (parsed.type === 'reaction') {
        const { messageId, emoji, user } = parsed;

        // Toggle the reaction
        await db.toggleReaction(messageId, emoji, user);

        // Get updated reactions
        const reactionsRows = await db.getReactionsForMessage(messageId);
        
        // Send the updated reactions to all clients
        wss.clients.forEach(client => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(
              JSON.stringify({
                type: 'reaction',
                messageId,
                reactions: reactionsRows.map(r => ({
                  emoji: r.emoji,
                  user: r.user
                }))
              })
            );
          }
        });
      }
    } catch (err) {
      console.error('Error processing websocket message:', err);
    }
  });

  ws.on('close', () => {
    console.log('Client disconnected');
  });
});

try {
  const address = await app.listen({ port: 3000, host: '0.0.0.0' });
  console.log(`Server listening on ${address}`);
} catch (err) {
  console.error('Error starting server:', err);
  process.exit(1)
}
